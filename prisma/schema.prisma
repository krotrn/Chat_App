// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  USER
}

enum AccountType {
  EMAIL
  GOOGLE
  GITHUB
}

enum FriendshipStatus {
  PENDING
  FRIENDS
  REJECTED
  BLOCKED
  NONE
}

enum ActivityType {
  MESSAGE
  FRIENDACCEPTED
  FRIENDREQUEST
  FRIENDREJECTED
  NEWFRIEND
  BLOCKED
  GROUPCREATED
  GROUPJOINED
  GROUPLEFT
  GROUPDELETED
  GROUPMEMBERADDED
  GROUPMEMBERREMOVED
  GROUPMEMBERROLECHANGED
}

enum RecommendationType {
  FRIENDREQUEST
  GROUP
}

enum GroupMemberRole {
  ADMIN
  MEMBER
  MODERATOR
}

model User {
  id                      String      @id @default(cuid())
  username                String      @unique @db.VarChar(20)
  avatarUrl               String?     @db.Text
  name                    String?
  email                   String      @unique @db.VarChar(255)
  bio                     String?
  role                    UserRoles   @default(USER)
  emailVerified           DateTime?
  password                String?
  loginType               AccountType @default(EMAIL)
  forgotPasswordToken     String?
  forgotPasswordExpiry    DateTime?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @default(now()) @updatedAt
  lastLogin               DateTime?
  status                  String?     @db.VarChar(100)
  passwordHistory         String[]    @default([])
  loginAttempts           Int         @default(0)
  accountLocked           Boolean     @default(false)

  // Relationships for user management
  accounts                Account[]
  sentRequests            FriendRequest[]   @relation("SentRequests")
  receivedRequests        FriendRequest[]   @relation("ReceivedRequests")
  friends                 UserFriends[]     @relation("UserFriends")
  friendOf                UserFriends[]     @relation("UserFriendsFriend")
  recentActivities        Activity[]
  recommendations         Recommendations[]
  receivedRecommendations Recommendations[] @relation("ReceivedRecommendations")

  createdGroups    Group[]       @relation("GroupCreator")
  groupMemberships GroupMember[]

  @@index([role])
  @@index([emailVerified])
  @@index([lastLogin])
  @@index([status])
  @@index([accountLocked])
  @@index([loginAttempts])
  @@index([forgotPasswordToken])
  @@index([forgotPasswordExpiry])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FriendRequest {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  expiresAt  DateTime?

  sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId, status])
  @@index([senderId, status])
}

model UserFriends {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("UserFriendsFriend", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Recommendations {
  id                 String             @id @default(cuid())
  userId             String
  type               RecommendationType
  recommendedUserId  String?
  recommendedGroupId String?
  title              String?
  description        String?
  avatarUrl          String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt

  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendedUser  User?  @relation("ReceivedRecommendations", fields: [recommendedUserId], references: [id], onDelete: Cascade)
  recommendedGroup Group? @relation(fields: [recommendedGroupId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, type])
  @@index([recommendedUserId])
  @@index([recommendedGroupId])
}

model GroupMember {
  id        String          @id @default(cuid())
  groupId   String
  userId    String
  role      GroupMemberRole @default(MEMBER)
  joinedAt  DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@index([groupId, role])
}

model Group {
  id          String   @id @default(cuid())
  backendId   String   @unique
  name        String
  avatarUrl   String?
  description String?
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  creator User          @relation("GroupCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members GroupMember[]

  recommendations Recommendations[]

  @@index([creatorId])
}

model Activity {
  id        String       @id @default(cuid())
  userId    String
  type      ActivityType
  content   String
  metadata  Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
}
